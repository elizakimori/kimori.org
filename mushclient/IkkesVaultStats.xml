<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, August 14, 2021, 11:24 PM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "IkkesVaultStats" generated by Plugin Wizard -->

<muclient>
<plugin
   name="IkkesVaultStats"
   author="Eliza Kimori"
   id="c1fb7197fc1db0e73b3e4bee"
   language="JScript"
   purpose="keep vault stats"
   date_written="2021-08-14 23:23:45"
   requires="5.06"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->


<!--  Triggers  -->

<triggers>
<trigger
   custom_colour="0"
   enabled="y"
   match="The cubby hole is *"
   name="jonasTrigger"
   script="jonasTriggerScript"
   sequence="100"
   variable="jonasTriggerVariable"
  >
  </trigger> 
<trigger
   custom_colour="0"
   enabled="y"
   match="The large wooden drawer is *"
   name="nellaTrigger1"
   script="nellaTriggerScript"
   sequence="100"
   variable="nellaTrigger1Variable"
  >
  </trigger> 
<trigger
   custom_colour="0"
   enabled="y"
   match="This is a large drawer made of dark brown wood.*"
   name="nellaTrigger2"
   script="nellaTriggerScript"
   sequence="100"
   variable="nellaTrigger2Variable"
  >
  </trigger> 
</triggers>
<aliases>
  <alias
   name="vaults"
   script="vaultsScript"
   match="vaults*"
   enabled="y"
   sequence="100"
  >
  </alias>
</aliases>
<script>
<![CDATA[
var state = {
	"vaults": { 
		"jonas": {
			"name": "jonas",
			"fakematches": [
				"The cubby hole is just a cube*",
			],
			"rawinv": "",
			"range": [-1, -1],
			"toggle": true
		},
		"nella": {
			"name": "nella",
			"fakematches": [
				"This is a large drawer made of dark brown wood.",
			],
			"rawinv": "",
			"range": [-1, -1],
			"toggle": true
		}

	}
};


		// "The large wooden drawer is * with *"
		// "This is a large drawer made of dark brown wood."l

/* init */
function main() {
	if (!world.getVariable("vs_State")) {
		world.setVariable("vs_State",serialize(state));
	} else {
		state = deserialize(world.getVariable("vs_State"));
	}
	
}


main();
/* end init */











function GetState(){
	state = deserialize(world.getVariable("vs_State"));
	return state;
}
function SaveState(){
		world.setVariable("vs_State",serialize(state));
}
function ShowState(){
	var msg = "";
	msg += "nella: " + GetState().vaults["nella"].rawinv + "\n";
	msg += "jonas: " + GetState().vaults["jonas"].rawinv + "\n";
	world.Note(msg);
}


/* events */
function nellaTriggerScript() {
vaultTriggerScript("nella");
}
function jonasTriggerScript() { 
vaultTriggerScript("jonas");
}
function vaultsScript() {
GetState();
ShowState();
}
/* end events */


function vaultTriggerScript(vaultkey) {
	var totalLines = world.GetLinesInBufferCount(); 
	var matchText = GetLineInfo(totalLines, 1); 
	var skip = state.vaults[vaultkey].fakematches[0]; //fixme
	if ( state.vaults[vaultkey].toggle ) {
		state.vaults[vaultkey].range[0]=totalLines;
		state.vaults[vaultkey].toggle = false;
	} else {
		state.vaults[vaultkey].range[1]=totalLines;
		state.vaults[vaultkey].rawinv = jt_processResult(state.vaults[vaultkey].range);
		state.vaults[vaultkey].toggle = true;
		SaveState();
	}
}
function jt_processResult(range) {
	var msg = "";
	for(var i = range[0],l=range[1];i<=l;i++){
		msg += GetLineInfo(i, 1) + " ";
	}
	return msg;
}
function serialize(obj) {
	var msg = "";
	msg += "[jonas]\n"+obj.vaults.jonas.rawinv+"\n";
	msg += "[nella]\n"+obj.vaults.nella.rawinv+"\n";
	return msg;	
}
function deserialize(str) {
	var obj = state;
	var lines = str.split("\n");
	var id = "";
	for (var i = 0, l = lines.length;i<l;i++) {
		if (lines[i].length <= 0) continue;
		if (lines[i].substr(0,1) == "[") { 
			id = lines[i].substr(1,lines[i].length-2);
			obj.vaults[id].rawinv="";
		} else { 
			if (typeof obj.vaults[id] === 'undefined') continue;
			obj.vaults[id].rawinv+=lines[i];
		} 
	}
	return obj;
}
]]></script>

</muclient>
